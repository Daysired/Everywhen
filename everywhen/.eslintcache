[{"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/index.js":"1","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/reportWebVitals.js":"2","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/App.js":"3","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/services/index.js":"4","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Mood.jsx":"5","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Improve.jsx":"6","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Whatworked.jsx":"7","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Highlight.jsx":"8","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Vent.jsx":"9","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessTime.jsx":"10","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessCard.jsx":"11","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Landing.jsx":"12","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/layout.jsx":"13","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/nav/Navbar.jsx":"14","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/nav/Burger.jsx":"15","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/nav/RightNav.jsx":"16","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/footer/Footer.jsx":"17"},{"size":589,"mtime":1607352987037,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1607114205652,"results":"20","hashOfConfig":"19"},{"size":2668,"mtime":1653939257546,"results":"21","hashOfConfig":"19"},{"size":227,"mtime":1607356314334,"results":"22","hashOfConfig":"19"},{"size":3399,"mtime":1653601080435,"results":"23","hashOfConfig":"19"},{"size":1743,"mtime":1607705441885,"results":"24","hashOfConfig":"19"},{"size":2046,"mtime":1607705540251,"results":"25","hashOfConfig":"19"},{"size":1784,"mtime":1607705418264,"results":"26","hashOfConfig":"19"},{"size":1308,"mtime":1607705485365,"results":"27","hashOfConfig":"19"},{"size":2801,"mtime":1653930138079,"results":"28","hashOfConfig":"19"},{"size":4959,"mtime":1653940402369,"results":"29","hashOfConfig":"19"},{"size":2917,"mtime":1653931487011,"results":"30","hashOfConfig":"19"},{"size":237,"mtime":1653682149098,"results":"31","hashOfConfig":"19"},{"size":982,"mtime":1653889350929,"results":"32","hashOfConfig":"19"},{"size":1288,"mtime":1653597718244,"results":"33","hashOfConfig":"19"},{"size":1772,"mtime":1653913603499,"results":"34","hashOfConfig":"19"},{"size":2007,"mtime":1653682733732,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1mj1463",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/index.js",[],["77","78"],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/reportWebVitals.js",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/App.js",["79"],"import axios from \"axios\";\nimport WellnessTime from \"./components/WellnessTime\";\nimport WellnessCard from \"./components/WellnessCard\"\nimport Landing from \"./components/Landing\";\nimport { Route, useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { baseURL, config } from \"./services\"\nimport './App.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core'\nimport Layout from \"./layouts/layout\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#638C80'\n    },\n    secondary: {\n      main: '#fefefe'\n    }\n  }\n})\n\nfunction App(props) {\n\n  const history = useHistory()\n  const [info, setInfo] = useState([]);\n  const [toggleFetch, setToggleFetch] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [wellTime, setWellTime] = useState({\n    mood: \"\",\n    date: \"\",\n    highlight: \"\",\n    activities: \"\",\n    vent: \"\",\n    whatWorked: \"\",\n    wentWell: \"\",\n    feelGood: \"\",\n    improve: \"\",\n    negativeEmotions: \"\",\n  })\n\n  const handleWellTime = (type, str) => {\n    setWellTime(prevState => ({\n      ...prevState, \n      [type]: str\n    })) \n  }\n\n  const submitWellTime = async (improve, negativeEmotions) => {\n    let fields = {\n      ...wellTime,\n      improve: improve, \n      negativeEmotions: negativeEmotions\n    }\n    let response = await axios.post(baseURL, { fields: fields }, config)\n    setToggleFetch(!toggleFetch)\n    history.push(\"/well-card\")\n  }\n  \n    useEffect(() => {\n        async function getWellnessTime() {\n          let response = await axios.get(baseURL, config);\n          let sortedInfo = response.data.records.sort((card1, card2) => Date.parse(card2.createdTime) - Date.parse(card1.createdTime))\n          setInfo(sortedInfo);\n          console.log(response)\n          \n        }\n        getWellnessTime();\n    }, [toggleFetch]);\n  \n  const handleClick = () => {\n      let num = selectedTab\n      setSelectedTab(num + 1);\n    }\n  \n  \n  return (\n    <ThemeProvider theme={theme}>\n <Layout>\n    <div className=\"App\">\n      <Route exact path=\"/\">\n        <Landing />\n      </Route>\n      <Route exact path=\"/assessment\">\n        <WellnessTime\n          setToggleFetch={setToggleFetch}\n          handleClick={handleClick}\n          handleWellTime={handleWellTime}\n          submitWellTime={submitWellTime}\n          selectedTab={selectedTab}\n          />\n      </Route>\n\n      <Route path=\"/card\">\n        {info.map((card) => (\n          <WellnessCard cardInfo={card}  key={card.id} setToggleFetch={setToggleFetch}/>  \n        ))}\n        \n      </Route>\n\n        </div>\n        </Layout>\n      </ThemeProvider>\n  );\n}\n\nexport default App;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/services/index.js",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Mood.jsx",["80"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SentimentSatisfiedIcon from \"@material-ui/icons/SentimentSatisfied\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport SentimentSatisfiedAltIcon from \"@material-ui/icons/SentimentSatisfiedAlt\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\nimport \"./Mood.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function FloatingActionButtons(props) {\n  const classes = useStyles();\n  const [date, setDate] = useState(\"\");\n  const [mood, setMood] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setDate(wellnessTime.fields.vent);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"date\", date);\n    props.handleWellTime(\"mood\", mood);\n    props.handleClick(\"highlight\");\n  };\n  console.log(props);\n\n  return (\n    <div className={classes.root}>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <ul id=\"horizontal-list\">\n            <li className=\"mood-list\">\n              <span onClick={() => setMood(\"Sad\")}>\n                <Fab size=\"large\" color=\"secondary\">\n                  <SentimentDissatisfiedIcon />\n                </Fab>\n              </span>\n            </li>\n\n            <li className=\"mood-list\">\n              <span onClick={() => setMood(\"Happy\")}>\n                <Fab color=\"secondary\">\n                  <SentimentSatisfiedAltIcon />\n                </Fab>\n              </span>\n            </li>\n\n            <li className=\"mood-list\">\n              <span onClick={() => setMood(\"Feeling Good\")}>\n                <Fab color=\"secondary\">\n                  <SentimentSatisfiedIcon />\n                </Fab>\n              </span>\n            </li>\n\n            <li className=\"mood-list\">\n              <span onClick={() => setMood(\"Depressed\")}>\n                <Fab color=\"secondary\">\n                  <SentimentVeryDissatisfiedIcon />\n                </Fab>\n              </span>\n            </li>\n\n            <li className=\"mood-list\">\n              <span onClick={() => setMood(\"Excited\")}>\n                <Fab color=\"secondary\">\n                  <SentimentVerySatisfiedIcon />\n                </Fab>\n              </span>{\" \"}\n            </li>\n          </ul>\n        </div>\n        <label htmlFor=\"date\">Date</label>\n        <input\n          id=\"date\"\n          name=\"date\"\n          type=\"text\"\n          value={date}\n          onChange={(e) => setDate(e.target.value)}\n        />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          id=\"button\"\n        >\n          Next\n        </Button>\n      </form>\n    </div>\n  );\n}\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Improve.jsx",["81"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./Improve.css\";\n\nconst Improve = (props) => {\n  const [improve, setImprove] = useState(\"\");\n  const [negativeEmotions, setNegativeEmotions] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setImprove(wellnessTime.fields.improve);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.submitWellTime(improve, negativeEmotions);\n  };\n\n  return (\n    <div>\n      <div Class=\"card\">\n        <form onSubmit={handleSubmit}>\n          <h3>What To Improve</h3>\n          <label htmlFor=\"improve\">What would you change?</label>\n          <input\n            name=\"improve\"\n            type=\"text\"\n            value={improve}\n            onChange={(e) => setImprove(e.target.value)}\n          />\n          <label htmlFor=\"negativeEmotions\">\n            What contributed to any negative emotions?\n          </label>\n          <input\n            name=\"negativeEmotions\"\n            type=\"text\"\n            value={negativeEmotions}\n            onChange={(e) => setNegativeEmotions(e.target.value)}\n          />\n\n          <Button\n            id=\"button\"\n            onClick={handleSubmit}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n          >\n            Submit\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Improve;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Whatworked.jsx",["82"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./Whatworked.css\";\n\nconst Whatworked = (props) => {\n  const [whatWorked, setWhatWorked] = useState(\"\");\n  const [wentWell, setWentWell] = useState(\"\");\n  const [feelGood, setFeelGood] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setWhatWorked(wellnessTime.fields.whatWorked);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"whatWorked\", whatWorked);\n    props.handleWellTime(\"wentWell\", wentWell);\n    props.handleWellTime(\"feelGood\", feelGood);\n    props.handleClick(\"improve\");\n  };\n\n  return (\n    <div>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <h3>What Worked</h3>\n          <label htmlFor=\"whatworked\">What are you proud of?</label>\n          <input\n            name=\"whatworked\"\n            type=\"text\"\n            value={whatWorked}\n            onChange={(e) => setWhatWorked(e.target.value)}\n          />\n          <label htmlFor=\"wentWell\">What went well?</label>\n          <input\n            name=\"wentWell\"\n            type=\"text\"\n            value={wentWell}\n            onChange={(e) => setWentWell(e.target.value)}\n          />\n          <label htmlFor=\"feelGood\">What made you feel good?</label>\n          <input\n            name=\"feelGood\"\n            type=\"text\"\n            value={feelGood}\n            onChange={(e) => setFeelGood(e.target.value)}\n          />\n        \n          <Button\n            id=\"button\"\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n          >\n            Next\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Whatworked;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Highlight.jsx",["83"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./Highlight.css\";\n\nconst Highlight = (props) => {\n  const [highlight, setHighlight] = useState(\"\");\n  const [activities, setActivities] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setHighlight(wellnessTime.fields.highlight);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"highlight\", highlight);\n    props.handleWellTime(\"activities\", activities);\n    props.handleClick(\"vent\");\n  };\n\n  return (\n    <div>\n      <div Class=\"card\">\n        <form onSubmit={handleSubmit}>\n          <h3>Highlight</h3>\n          <label htmlFor=\"highlight\">What was the highlight of your day?</label>\n\n          <input\n            name=\"highlight\"\n            type=\"text\"\n            value={highlight}\n            onChange={(e) => setHighlight(e.target.value)}\n          />\n          <label htmlFor=\"activities\">\n            What activities contributed to your highlight?\n          </label>\n\n          <input\n            name=\"activities\"\n            type=\"text\"\n            value={activities}\n            onChange={(e) => setActivities(e.target.value)}\n          />\n\n          <Button\n            id=\"button\"\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n          >\n            Next\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\nexport default Highlight;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Vent.jsx",["84"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./Vent.css\";\n\nconst Vent = (props) => {\n  const [vent, setVent] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setVent(wellnessTime.fields.vent);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"vent\", vent);\n    props.handleClick(\"whatWorked\");\n  };\n\n  return (\n    <div>\n      <div Class=\"card\">\n        <form onSubmit={handleSubmit}>\n          <h3>VENT THAT SH*T!</h3>\n          <label htmlFor=\"vent\">Vent Away!</label>\n          <input\n            name=\"vent\"\n            type=\"text\"\n            value={vent}\n            onChange={(e) => setVent(e.target.value)}\n          />\n          <Button\n            id=\"button\"\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n          >\n            Next\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Vent;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessTime.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessCard.jsx",["85","86"],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Landing.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/layout.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/nav/Navbar.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/nav/Burger.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/nav/RightNav.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/layouts/footer/Footer.jsx",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":55,"column":9,"nodeType":"93","messageId":"94","endLine":55,"endColumn":17},{"ruleId":"95","severity":1,"message":"96","line":39,"column":6,"nodeType":"97","endLine":39,"endColumn":37,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"96","line":20,"column":6,"nodeType":"97","endLine":20,"endColumn":37,"suggestions":"99"},{"ruleId":"95","severity":1,"message":"96","line":21,"column":6,"nodeType":"97","endLine":21,"endColumn":37,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"96","line":20,"column":6,"nodeType":"97","endLine":20,"endColumn":37,"suggestions":"101"},{"ruleId":"95","severity":1,"message":"96","line":19,"column":6,"nodeType":"97","endLine":19,"endColumn":37,"suggestions":"102"},{"ruleId":"91","severity":1,"message":"103","line":17,"column":8,"nodeType":"93","messageId":"94","endLine":17,"endColumn":12},{"ruleId":"95","severity":1,"message":"104","line":58,"column":6,"nodeType":"97","endLine":58,"endColumn":8,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.wellnesTime.length'. Either include it or remove the dependency array.","ArrayExpression",["108"],["109"],["110"],["111"],["112"],"'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'emojis' and 'props.cardInfo.fields.mood'. Either include them or remove the dependency array. If 'setEmoji' needs the current value of 'props.cardInfo.fields.mood', you can also switch to useReducer instead of useState and read 'props.cardInfo.fields.mood' in the reducer.",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"114","fix":"116"},{"desc":"114","fix":"117"},{"desc":"114","fix":"118"},{"desc":"114","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [props.wellnessTime, params.id, props.wellnesTime.length]",{"range":"122","text":"123"},{"range":"124","text":"123"},{"range":"125","text":"123"},{"range":"126","text":"123"},{"range":"127","text":"123"},"Update the dependencies array to be: [emojis, props.cardInfo.fields.mood]",{"range":"128","text":"129"},[1313,1344],"[props.wellnessTime, params.id, props.wellnesTime.length]",[609,640],[659,690],[609,640],[527,558],[2046,2048],"[emojis, props.cardInfo.fields.mood]"]