[{"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/index.js":"1","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/reportWebVitals.js":"2","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/App.js":"3","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/services/index.js":"4","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Nav.jsx":"5","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Mood.jsx":"6","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Improve.jsx":"7","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Whatworked.jsx":"8","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Highlight.jsx":"9","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Vent.jsx":"10","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessTime.jsx":"11","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessCard.jsx":"12"},{"size":589,"mtime":1607352987037,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1607114205652,"results":"15","hashOfConfig":"14"},{"size":2340,"mtime":1607644072372,"results":"16","hashOfConfig":"14"},{"size":227,"mtime":1607356314334,"results":"17","hashOfConfig":"14"},{"size":827,"mtime":1607636927555,"results":"18","hashOfConfig":"14"},{"size":3040,"mtime":1607641495372,"results":"19","hashOfConfig":"14"},{"size":1943,"mtime":1607644224935,"results":"20","hashOfConfig":"14"},{"size":2090,"mtime":1607641525971,"results":"21","hashOfConfig":"14"},{"size":2513,"mtime":1607641504316,"results":"22","hashOfConfig":"14"},{"size":1367,"mtime":1607641531177,"results":"23","hashOfConfig":"14"},{"size":1814,"mtime":1607644172669,"results":"24","hashOfConfig":"14"},{"size":4570,"mtime":1607644122667,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1oxtwlj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/index.js",[],["55","56"],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/reportWebVitals.js",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/App.js",["57"],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/services/index.js",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Nav.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Mood.jsx",["58"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport Fab from \"@material-ui/core/Fab\";\nimport SentimentSatisfiedIcon from \"@material-ui/icons/SentimentSatisfied\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport SentimentSatisfiedAltIcon from \"@material-ui/icons/SentimentSatisfiedAlt\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function FloatingActionButtons(props) {\n  const classes = useStyles();\n  const [date, setDate] = useState(\"\");\n  const [mood, setMood] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setDate(wellnessTime.fields.vent);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"date\", date);\n    props.handleWellTime(\"mood\", mood);\n    props.handleClick(\"highlight\");\n  };\n  console.log(props)\n\n  return (\n    <div className={classes.root}>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          id=\"standard-secondary\"\n          label=\"Date\"\n          color=\"secondary\"\n          value={date}\n          onChange={(e) => setDate(e.target.value)}/>\n        {/* <input\n          name=\"vent\"\n          type=\"text\"\n          value={date}\n          onChange={(e) => setDate(e.target.value)}\n        /> */}\n\n        <span onClick={() => setMood(\"dissatisfied\")}>\n          <Fab size=\"large\" color=\"secondary\">\n            <SentimentDissatisfiedIcon />\n          </Fab>\n        </span>\n        <span onClick={() => setMood(\"satisfiedv\")}>\n          <Fab color=\"secondary\">\n            <SentimentSatisfiedAltIcon />\n          </Fab>\n        </span>\n\n        <span onClick={() => setMood(\"satisfied\")}>\n          <Fab color=\"secondary\">\n            <SentimentSatisfiedIcon />\n          </Fab>\n        </span>\n\n        <span onClick={() => setMood(\"verydissatisfied\")}>\n          <Fab color=\"secondary\">\n            <SentimentVeryDissatisfiedIcon />\n          </Fab>\n        </span>\n\n        <span onClick={() => setMood(\"verysatisfied\")}>\n          <Fab color=\"secondary\">\n            <SentimentVerySatisfiedIcon />\n          </Fab>\n        </span>\n        {/* <button type=\"submit\">Make Entry</button> */}\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\">\n       Next\n      </Button>\n      </form>\n    </div>\n  );\n}\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Improve.jsx",["59","60"],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Whatworked.jsx",["61","62"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst Whatworked = (props) => {\n  const [whatWorked, setWhatWorked] = useState(\"\");\n  const [wentWell, setWentWell] = useState(\"\");\n  const [feelGood, setFeelGood] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setWhatWorked(wellnessTime.fields.whatWorked);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"whatWorked\", whatWorked);\n    props.handleWellTime(\"wentWell\", wentWell);\n    props.handleWellTime(\"feelGood\", feelGood);\n    props.handleClick(\"improve\");\n  };\n\n  return (\n    <div>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <h3>What Worked</h3>\n          <label htmlFor=\"whatworked\">What are you proud of?</label>\n          <input\n            name=\"whatworked\"\n            type=\"text\"\n            value={whatWorked}\n            onChange={(e) => setWhatWorked(e.target.value)}\n          />\n          <label htmlFor=\"wentWell\">What went well?</label>\n          <input\n            name=\"wentWell\"\n            type=\"text\"\n            value={wentWell}\n            onChange={(e) => setWentWell(e.target.value)}\n          />\n          <label htmlFor=\"feelGood\">What made you feel good?</label>\n          <input\n            name=\"feelGood\"\n            type=\"text\"\n            value={feelGood}\n            onChange={(e) => setFeelGood(e.target.value)}\n          />\n          {/* <button type=\"submit\">Make Entry</button> */}\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\">\n            Next\n            </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Whatworked;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Highlight.jsx",["63"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst Highlight = (props) => {\n  const [highlight, setHighlight] = useState(\"\");\n  const [activities, setActivities] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setHighlight(wellnessTime.fields.highlight);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"highlight\", highlight);\n    props.handleWellTime(\"activities\", activities);\n    props.handleClick(\"vent\");\n  };\n\n  return (\n    <div>\n      <div Class=\"card\">\n        <form onSubmit={handleSubmit}>\n          <h3>Highlight</h3>\n          <label htmlFor=\"highlight\">What was the highlight of your day?</label>\n          <TextField\n          id=\"standard-multiline-flexible\"\n          label=\"highlight\"\n          multiline\n          rowsMax={4}\n          value={activities}\n          onChange={(e) => setHighlight(e.target.value)}\n        />\n          {/* <input\n            name=\"highlight\"\n            type=\"text\"\n            value={highlight}\n            onChange={(e) => setHighlight(e.target.value)}\n          /> */}\n          <label htmlFor=\"activities\">\n            What activities contributed to your highlight?\n          </label>\n          {/* <TextField\n          id=\"outlined-textarea\"\n          label=\"Multiline Placeholder\"\n          placeholder=\"Placeholder\"\n          multiline\n          variant=\"outlined\"\n        /> */}\n          <TextField\n          id=\"standard-multiline-flexible\"\n          label=\"activities\"\n          multiline\n          rowsMax={4}\n          value={activities}\n          onChange={(e) => setActivities(e.target.value)}\n        />\n          {/* <input\n            name=\"activities\"\n            type=\"text\"\n            value={activities}\n            onChange={(e) => setActivities(e.target.value)}\n          /> */}\n          {/* <button type=\"submit\">Make Entry</button> */}\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\">\n            Next\n            </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\nexport default Highlight;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/Vent.jsx",["64","65"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst Vent = (props) => {\n  const [vent, setVent] = useState(\"\");\n\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id && props.wellnesTime.length > 0) {\n      const wellnessTime = props.wellnessTime.find(\n        (wellnessTime) => wellnessTime.id === params.id\n      );\n      setVent(wellnessTime.fields.vent);\n    }\n  }, [props.wellnessTime, params.id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    props.handleWellTime(\"vent\", vent);\n    props.handleClick(\"whatWorked\");\n  };\n\n  return (\n    <div>\n      <div Class=\"card\">\n        <form onSubmit={handleSubmit}>\n          <h3>VENT THAT SH*T!</h3>\n          <label htmlFor=\"vent\">Vent Away!</label>\n          <input\n            name=\"vent\"\n            type=\"text\"\n            value={vent}\n            onChange={(e) => setVent(e.target.value)}\n          />\n          {/* <button type=\"submit\">Make Entry</button> */}\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\">\n            Next\n            </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Vent;\n","/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessTime.jsx",[],"/Users/daisy/general_assembly/sei/garnet/unit_2/P2/Everywhen/everywhen/src/components/WellnessCard.jsx",["66","67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":42,"column":9,"nodeType":"75","messageId":"76","endLine":42,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":39,"column":6,"nodeType":"79","endLine":39,"endColumn":37,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":20,"column":6,"nodeType":"79","endLine":20,"endColumn":37,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"81","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":21,"column":6,"nodeType":"79","endLine":21,"endColumn":37,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"78","line":20,"column":6,"nodeType":"79","endLine":20,"endColumn":37,"suggestions":"84"},{"ruleId":"73","severity":1,"message":"81","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":19,"column":6,"nodeType":"79","endLine":19,"endColumn":37,"suggestions":"85"},{"ruleId":"73","severity":1,"message":"86","line":16,"column":8,"nodeType":"75","messageId":"76","endLine":16,"endColumn":14},{"ruleId":"73","severity":1,"message":"87","line":18,"column":10,"nodeType":"75","messageId":"76","endLine":18,"endColumn":24},{"ruleId":"77","severity":1,"message":"88","line":65,"column":6,"nodeType":"79","endLine":65,"endColumn":8,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.wellnesTime.length'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'TextField' is defined but never used.",["93"],["94"],["95"],["96"],"'Button' is defined but never used.","'createMuiTheme' is defined but never used.","React Hook useEffect has missing dependencies: 'emojis' and 'props.cardInfo.fields.mood'. Either include them or remove the dependency array. If 'setEmoji' needs the current value of 'props.cardInfo.fields.mood', you can also switch to useReducer instead of useState and read 'props.cardInfo.fields.mood' in the reducer.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"98","fix":"100"},{"desc":"98","fix":"101"},{"desc":"98","fix":"102"},{"desc":"98","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [props.wellnessTime, params.id, props.wellnesTime.length]",{"range":"106","text":"107"},{"range":"108","text":"107"},{"range":"109","text":"107"},{"range":"110","text":"107"},{"range":"111","text":"107"},"Update the dependencies array to be: [emojis, props.cardInfo.fields.mood]",{"range":"112","text":"113"},[1345,1376],"[props.wellnessTime, params.id, props.wellnesTime.length]",[638,669],[685,716],[636,667],[559,590],[1906,1908],"[emojis, props.cardInfo.fields.mood]"]